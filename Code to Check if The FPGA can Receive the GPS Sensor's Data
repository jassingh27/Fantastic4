// UART_RX Module:
// This module detects any incoming data on the rx line. If data is received, data_received is set to 1.
module UART_RX (
    input wire clk, //clock
    input wire rst, //reset
    input wire rx,  //rx since FPGA is receiving data from GPS sensor
    output reg [7:0] data_received //8bit GPS sensor data
);

    reg [3:0] detect_count = 4'd0;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            data_received <= 8'b00000000; //makes sure that the data_received is 8bits
            detect_count <= 0; //detect_count is needed to identify which bit in the gps sensor
        end else begin
            if (rx) begin
                if(detect_count < 8) begin //checks the data from the gps sensor is in 8 bits
                    data_received[detect_count] <= rx;
                    detect_count <= detect_count + 1;
                end
            end else begin
                detect_count <= 0;
                data_received <= 8'b00000000;
            end
        end
    end

endmodule

// LED_Display Module:
// This module displays gps_data on LEDs when data_received is high.
module LED_Display (
    input wire data_received,
    input wire [7:0] gps_data,
    output wire [7:0] leds
);

    assign leds = data_received ? gps_data : 8'b00000000;

endmodule

// Top Module:
module TOP_MODULE (
    input wire clk,
    input wire rst,
    input wire rx,
    input wire [7:0] gps_data,    // Input for GPS data
    output wire [7:0] leds    //the 8 leds on the FPGA board
);

    wire data_received;

    UART_RX uart_rx (
        .clk(clk),
        .rst(rst),
        .rx(rx),
        .data_received(data_received)
    );

    LED_Display led_display (
        .data_received(data_received),
        .gps_data(gps_data),       // Pass the GPS data to the LED_Display module
        .leds(leds)
    );

endmodule
